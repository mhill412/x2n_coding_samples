function [YPrcp,YDscg,YBF,YRO]=AnalyzeJudd(JuddCreekDischarge,JuddWestPrecip,yr)
%  Analyze King County hydrology data for the Judd Creek watershed.
% Usage:
%        [YPrcp,YDscg,YBF,YRO]=AnalyzeJudd(JuddCreekDischarge,JuddWestPrecip,yr)
%
% where      JuddCreekDischarge and JuddWestPrecip are MATLAB tables created
%            from the CVS files generated by the King County web site.  
%     
%        yr  is the water year to be analyzed
%
% The output are three values of
%             YPrecip (cummulative rainfall for the selected water year), 
%             YDscg (the cummulative Judd Creek discharge volume normalized by area)
%             YBF   (the cummulative Judd Creek baseflow volume normalized by area) 
%             YRO   (the cummulative Judd Creek runoff volume normalized by area)
%
% currently no error checking. The assumption is that the files include the full water year data 
% with hourly sampling.  This could be fixed in a future version (deal with
% different sampling times and report that data are not sufficient for the
% requested year.
% JMB 12/2021

JuddArea=3220*43560; %watershed area in sq ft

% process the discharge data
% this finds the indexes into the data for the selected year
id=findwateryearindex(JuddCreekDischarge,yr);
% find the column names that have data to use (discharge in the 5th and
% warnings in the sixth
varnameD=JuddCreekDischarge.Properties.VariableNames{5};
varnameW=JuddCreekDischarge.Properties.VariableNames{6};
% pull the hourly determinations of discharge and the warnings out of the table
discharge=JuddCreekDischarge.(varnameD)(id);
npts=length(discharge);
W=JuddCreekDischarge.(varnameW)(id);

% calculate the sum of discharges volumes for hourly sampling for entire year - 
% answer in in cubic feet divide by area of watershed to determine the 
% discharge per unit area of watershed and converted to inches.
YDscg=12*sum(discharge)*60*60/JuddArea; 

% find indexes of lines in table with warning flags for discharge data:
idWP=find(W=='P');
idWE=find(W=='E');
idWW=find(W=='W');

% process the precipitation data:
idPrcp=findwateryearindex(JuddWestPrecip,yr); %find the data in the selected year
varnameP=JuddWestPrecip.Properties.VariableNames{4}; % this finds the variable name for the column with data
% obtain the cummulative sum of precipitation.  The last entry is the full
% rainfall for the year
Precip=cumsum(JuddWestPrecip.(varnameP)(idPrcp));
YPrcp=Precip(end);

% find lines with warning flags for precipitation
varnameW=JuddWestPrecip.Properties.VariableNames{5};
plt_dat.idPrcpP=find(JuddWestPrecip.(varnameW)(idPrcp)=='P');
plt_dat.idPrcpE=find(JuddWestPrecip.(varnameW)(idPrcp)=='E');
plt_dat.idPrcpS=find(JuddWestPrecip.(varnameW)(idPrcp)=='S');
plt_dat.txt=sprintf('West Judd Creek Rain Gauge                                                                                Water Year %i',yr);
plt_dat.txt2=sprintf('Total Precipitation = %5.1f in',YPrcp);
plt_dat.doy=(1:length(idPrcp))/24;
plt_dat.hrlyprcp=JuddWestPrecip.(varnameP)(idPrcp);
plt_dat.Precip=Precip;
plt_dat.xlm=[0 366];

% Begin plotting:
figure(20)  
clf
plt_Precip(plt_dat);

% Plot the discharge data and enter baseflow determinations
ax=subplot(2,1,2);
%semilogy((1:npts)/24,discharge,'ko-','markerfacecolor','k','markersize',2)
ylm=[.5 300];
xlm=[1 366];
rflg=1;
% this is a custom function to click on baseflow estimations
[t,d]=semilog_plotx((1:npts)/24,discharge,xlm,ylm,plt_dat,rflg); 
% add points for the beginning and end of the water year
if t(1)~=0
    t=[0;t(:)];
    d=[d(1);d(:)];
end

if t(end)~=366
    t=[t;366];
    d=[d;d(end)];
end

%Simpson-rule (trapazoidal) integration of the baseflow curve converted to inches
YBF=12*trapz(t,d*60*60*24)/JuddArea;
YRO=YDscg-YBF; % Runoff is the difference of baseflow and total discharge

% make final versions of plots
rflg=0; %don't plot recession slope
plt_Precip(plt_dat);
plt_dschrg((1:npts)/24,discharge,1:npts,t,d,[1 300],' ',rflg)
 hold on
% add the full curve of Baseflow to the ficture
semilogy(t,d,'r-','linewidth',3)
%semilogy(t,d,'ro','markerFaceColor','r','markersize',10)
% plot warnings on the discharge plot
nP=length(idWP);
if nP<24
     for j=1:nP
        text(idWP(j)/24,180,'P')
     end
else
    for j=1:100:nP
        text(idWP(j)/24,180,'P')
    end
end
nE=length(idWE);
if nE<24
     for j=1:nE
        text(idWE(j)/24,180,'E')
     end
else
   for j=1:100:nE
        text(idWE(j)/24,180,'E')
   end
end
 nW=length(idWW);
 if nW<24
    for j=1:nW
        text(idWW(j)/24,180,'W')
    end
 else
    for j=1:100:nW
        text(idWW(j)/24,180,'W')
     end
 end

%add labels and information
txt3=sprintf('Total Discharge = %5.1f in \nBaseflow = %5.1f in \nRunoff = %5.1f in',YDscg,YBF,YRO);
text(250,95,txt3,'FontSize',18)
txt=sprintf('Judd Creek Discharge                                                                                                                           ');
title(txt,'FontSize',20)
grid on
box on
hold off


function [pntx,pnty,indx]=semilog_plotx(x,y,xlm,ylm,plt_dat,rflg)
% Function for plotting with cursor control
% Usage: [xmark,ymark,index]=plotx(x,y,......)
% where [xmark,ymark] is an array of hand entered x,y points
%       index is the set of indices for the last version of the plot
%       x,y are points to plot
% 1) press "t" in two locations to truncate outside the included range
% 2) center mouse in area of interest and press "z" for zoom to zoom in
% 3) press "f" to scroll forward & "b" for backwards by 10%
% 4) press "a" to see whole plot again
% 5) click mouse to enter point at cursor position.
% 6) press "d" to delete entered point nearest cursor
% 7) press <CR> to stop
instrc=sprintf(['1) click mouse to enter point at cursor position\n'...
    '2) press "d" to delete entered point nearest cursor\n'...
    '3) press "t" in two locations to define a range\n'...
 '4) center mouse in area of interest and press "z" for zoom\n'...
 '5) press "f" to scroll forward & "b" for backwards by 10%%\n6) press "a" to see whole plot again\n'...
 '7) dotted lines indicate expected slope of baseflow recession\n'...
  '8) press <CR> to stop\n'...
    ]);

% Set up initial values:

npts=length(x);

% text plotting point:
 xplt=.15; yplt=.95;

pntx=[];
pnty=[];
tot=1:npts;
indx=tot;
button(1)=1;

%initial plot:
plt_dschrg(x,y,indx,pntx,pnty,ylm,instrc,rflg)


% Continue until you type "CR"
 while button(1)~=13

[xxx,yyy,button]=ginput(1);
if(isempty(button)==1)
	button=13;
else
	xx(1)=xxx; yy(1)=yyy;
end


% If "a" is typed then plot all
   if button==97
     indx=tot;
     plt_dschrg(x,y,indx,pntx,pnty,ylm,instrc,rflg)
     plt_dat.xlm=xlm;
     plt_Precip(plt_dat);
    end


% Typing "t" in two locations truncates data outside those points
    if button==116 
          [xx(2),yy(2)]=ginput(1);
          xx=sort(xx);
          indx=find(x>xx(1) & x<xx(2));
          plt_dschrg(x,y,indx,pntx,pnty,ylm,instrc,rflg)
          plt_dat.xlm=[x(indx(1)) x(indx(end)) ];
          plt_Precip(plt_dat);
    end

% letter "z" to zoom
    if button==122
           test=abs(x-xx(1));
           pnt=find(test==min(test));
           npt=length(indx);
           indx=(pnt-fix(npt/4)):(pnt+fix(npt/4));
           indx=indx(find(indx<=npts) & indx>=1);
           if(length(indx)<=1), indx=pnt-1:pnt+1; end
           plt_dschrg(x,y,indx,pntx,pnty,ylm,instrc,rflg)
           plt_dat.xlm=[x(indx(1)) x(indx(end)) ];
           plt_Precip(plt_dat);
    end

% letter f to scroll forward  10%
  if button==102
     pts=length(indx);
     indx=indx+fix(pts/10);
     indx=indx(indx<=npts );
     plt_dschrg(x,y,indx,pntx,pnty,ylm,instrc,rflg)
     plt_dat.xlm=[x(indx(1)) x(indx(end)) ];
     plt_Precip(plt_dat);
  end

% letter b to scroll back 10%
  if button==98
     pts=length(indx);
     indx=indx-fix(pts/10);
     indx=indx(indx>=1 );
     plt_dschrg(x,y,indx,pntx,pnty,ylm,instrc,rflg)
     plt_dat.xlm=[x(indx(1)) x(indx(end)) ];
     plt_Precip(plt_dat);
  end


% Click mouse to enter a point
   if button==1
        pntx=[pntx xx(1)];
        pnty=[pnty yy(1)];
        plt_dschrg(x,y,indx,pntx,pnty,ylm,instrc,rflg)
        plt_dat.xlm=[x(indx(1)) x(indx(end)) ];
        plt_Precip(plt_dat);
   end

% Type letter "d" to delete point
   if button==100
       test=abs(pntx-xx(1));
       pnt=find(test==min(test));
       notpnt=find((1:length(pntx))~=pnt(end)); %possible that several points have same index. Select most recently entered point
       pnty=pnty(notpnt);
       pntx=pntx(notpnt);
       plt_dschrg(x,y,indx,pntx,pnty,ylm,instrc,rflg)
       plt_dat.xlm=[x(indx(1)) x(indx(end)) ];
       plt_Precip(plt_dat);
   end
 end

 % in case points were not entered in order, sort from early to late time
 [pntx,id]=sort(pntx);
 pnty=pnty(id);

function plt_Precip(plt_dat)
txt=plt_dat.txt;
txt2=plt_dat.txt2;
idPrcpS=plt_dat.idPrcpS;
idPrcpP=plt_dat.idPrcpP;
idPrcpE=plt_dat.idPrcpE;
x=plt_dat.doy;
y=plt_dat.hrlyprcp;
z=plt_dat.Precip;

ax=subplot(2,1,1);
% make a double y-axis plot 
yyaxis left
h1=plot(x,y);
ylabel('Precipitation (inches/hour)','FontSize',16)
text(250,.37,txt2,'FontSize',18)
xlabel('Day of Water Year','FontSize',16)
ylim([0 .4])
yyaxis right
h2=plot(x,z,'r-');
set(h2,'linewidth',3)
ylabel('Cummulative (inches)','FontSize',16)
ylim([0 59])
hold on

% the following plots the warnings but decimates this in the case that
% there are days of warnings given with every hour - too many things to
% plot which will overload graphics memory
% handle the provisionals values warnings
nP=length(idPrcpP);
if nP<24  % if just a few warnings plot all
    for j=1:nP
       text(idPrcpP(j)/24,.35,'P')
    end
else % if there are a large number, only plot every couple days so the plot is readable
    for j=1:100:nP
       text(idPrcpP(j)/24,45,'P')
    end
end
% handle the estimates warnings
nE=length(idPrcpE);
      if nE<24
         for j=1:nE
        text(idPrcpE(j)/24,45,'E')
         end
      else
          for j=1:100:nE
          text(idPrcpE(j)/24,45,'E')
          end
      end

% handle snow days warnings
nS=length(idPrcpS);
if nS<24
    for j=1:nS
        text(idPrcpS,(j)/24,45,'S')
    end
else
    for j=1:100:nS
        text(idPrcpS,(j)/24,45,'S')
    end
end



xlim(plt_dat.xlm)
set(ax,'FontSize',16)
title(txt,'FontSize',20)
grid on
box on
hold off


function plt_dschrg(x,y,indx,pntx,pnty,ylm,instrc,rflg)
     ax=subplot(2,1,2);
     semilogy(x(indx),y(indx),'ko-','markerfacecolor','k','markersize',2) 
      hold on
     if ~isempty(pntx)
       idm=find(pntx>x(indx(1)) & pntx<x(indx(end)));      
       semilogy(pntx(idm),pnty(idm),'ro','markersize',10,'markerfacecolor','r')        
     end
     % recession is about 200 days for factor of 10
     xr=[x(indx(1)) x(indx(end))];
     yr=(logspace(log10(.005),log10(200),50))'*10.^(-(xr(1)-xr)/150);
     yr=yr(:,end:-1:1);
     if rflg
     semilogy(xr,yr,'k:','linewidth',1) %,'linealpha',.2)
     end
     hold off
    xlabel('Day of Water Year','FontSize',16)
    ylabel('Discharge (cfs)','FontSize',16)
    xrange=x(indx(end))-x(indx(1));
    xplt=x(indx(1))+xrange*.7;
    yplt=ylm(1)+.2*(ylm(2)-ylm(1));
    text(xplt,yplt,instrc)
    cal={'Oct','Nov','Dec','Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep'};
    xcal=[1 32 62 93 123 154 184 215 245 275 306 337 ];
    for i=1:12
        text(xcal(i),.85*ylm(2),cal{i},'FontSize',14)
    end
    set(ax,'FontSize',16)
       ylim(ylm)
       xlim([x(indx(1)) x(indx(end))])

